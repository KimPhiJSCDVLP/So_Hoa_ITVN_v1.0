var flatToHierarchy = function(flat) {

	var roots = []; // things without parent

	// make them accessible by guid on this map
	var all = {};

	flat.forEach(function(item) {
		all[item.id] = item
	});

	// connect childrens to its parent, and split roots apart
	Object.keys(all).forEach(function(guid) {
		var item = all[guid]
		//roots.push(item)
		if (item.parent === '#') {
			roots.push(item)
		} else if (item.parent in all) {
			var p = all[item.parent]
			if (!('Children' in p)) {
				p.Children = []
			}
			p.Children.push(item)
		} else {
			roots.push(item)
		}
	});

	// done!
	return roots;
}

var flatToChildren = function(flat) {

	var roots = []; // things without parent

	// make them accessible by guid on this map
	var all = {};

	flat.forEach(function(item) {
		all[item.id] = item
	});

	// connect childrens to its parent, and split roots apart
	for (var i = 0; i < flat.length; i++) { 
	    var guid = flat[i].id;
		var item = all[guid]
		roots.push(item)
		if (item.parent === '#') {
			//roots.push(item)
		} else if (item.parent in all) {
			var p = all[item.parent]
			if (!('Children' in p)) {
				p.Children = []
			}
			p.Children.push(item)
		} else {
			//roots.push(item)
		}
	};

	// done!
	return roots;
}

/**APW-104: format number (999.999.999.999)*/
Number.prototype.toMoney = function(decimals, decimal_sep, thousands_sep){ 
    var n = this,
    c = isNaN(decimals) ? 2 : Math.abs(decimals), //if decimal is zero we must take it, it means user does not want to show any decimal
    d = decimal_sep || '.', //if no decimal separator is passed we use the dot as default decimal separator (we MUST use a decimal separator)

    t = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep, //if you don't want to use a thousands separator you can pass empty string as thousands_sep value

    sign = (n < 0) ? '-' : '',

    //extracting the absolute value of the integer part of the number and converting to string
    i = parseInt(n = Math.abs(n).toFixed(c)) + '', 

    j = ((j = i.length) > 3) ? j % 3 : 0; 
    
    return sign + (j ? i.substr(0, j) + t : '') + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : ''); 
}

String.prototype.unaccent = String.prototype.unaccent ||
function() {
    var result = this.toString().toLowerCase();
    result = result.replace(/đ/gi, "d");
    result = result.replace(/Đ/gi, "d");
    result = result.replace(/®/gi, "d");
    result = result.replace(/§/gi, "d");
    result = result.toLowerCase();
    result = result.replace(/ð/gi, "d");
    result = result.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ|ẵ/gi, "a");
    result = result.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ|ễ/gi, "e");
    result = result.replace(/ì|í|ị|ỉ|ĩ|ĩ/gi, "i");
    result = result.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/gi, "o");
    result = result.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/gi, "u");
    result = result.replace(/ỳ|ý|ỵ|ỷ|ỹ|ỹ/gi, "y");

    // str=
    // result.replace(/!|@|%|\^|\*|\(|\)|\+|\=|\<|\>|\?|\/|,|\.|\:|\;|\'|
    // |\"|\&|\#|\[|\]|~|$|_/g,"-");
    /* tìm và thay thế các kí tự đặc biệt trong chuỗi sang kí tự - */
    // str= result.replace(/-+-/g,"-"); //thay thế 2- thành 1-
    result = result.replace(/^\-+|\-+$/gi, "");
    // cắt bỏ ký tự - ở đầu và cuối chuỗi
    return result;
}

var getJsonJsTree = function(src) {
	var result = [], obj = {};
	src.forEach(function(item) {
		var a_attr = {};
		if (item.url !== null && item.url !== "") {
			a_attr.href = item.url;
			item.a_attr = a_attr;
		}
		result.push(item);
	})

	return result;
}

function calculateSumAgent(src) {
	var all = {};
	result = [];
	
	src.forEach(function(jsonObj) {
		var children = jsonObj.Children;
		var total = jsonObj.qc;
		
		if (children !== undefined){
		    while(children.length > 0){
		    	var item = children.pop();
		    	if(item.Children !== undefined){
		    		children = children.concat(item.Children);
		    	}
		    	
		    	total += parseInt(item.qc);
		    }
		}
	    //jsonObj.qc = total;
	    jsonObj.text = jsonObj.text + "/" + total;
	    result.push(jsonObj);
	});
	return result;
}


var addMessage = function(text, extra_tags) {

    var message = "<div class=\"alert alert-";
    message += extra_tags;
    message += "\">";
    message += "<a class=\"close\" data-dismiss=\"alert\" href=\"#\">&times;</a>";
    message += text;
    message += "</div>";

    $("#message-notification").append(message);
    $("#message-notification").fadeIn(500);


    setTimeout(function() {
        $("#message-notification").fadeOut(500,
            function() {
                $("#message-notification").empty();
            });
    }, 30000);

}

function run_waitMe(el) {
	el.waitMe({

		// none, rotateplane, stretch, orbit, roundBounce, win8,
		// win8_linear, ios, facebook, rotation, timer, pulse,
		// progressBar, bouncePulse or img
		effect : 'roundBounce',

		// place text under the effect (string).

		text : '',

		// background for container (string).

		bg : 'rgba(255,255,255,0.7)',

		// color for background animation and text (string).

		color : '#000',

		// change width for elem animation (string).

		sizeW : '',

		// change height for elem animation (string).
		sizeH : '200',

		// url to image
		source : '',

		// callback
		onClose : function() {
		}

	});

}

var Report = function(params) {
	self = this;
	self.params = params;
	self.init = function() {
		self.initialInputfield();

		$(self.params._container).submit(function(e) {
			e.preventDefault();
		})
				.validate(
						{
							success : function(label) {
							},
							submitHandler : function() {
								submitSearch(1);
							},
							highlight : function(element) {
								$(element).closest('.form-group').addClass(
										'has-error');
								$(element).prev().find('.select2-selection')
										.css('border-color', '#A94442');
							},
							unhighlight : function(element) {
								$(element).closest('.form-group').removeClass(
										'has-error');
								$(element).closest('.form-group').addClass(
										'has-success');
								$(element).prev().find('.select2-selection')
										.css('border-color', '');
							},
							errorElement : 'span',
							errorClass : 'help-block',
							errorPlacement : function(error, element) {
								if (element.parent('.input-group').length) {
									error.insertAfter(element.parent());
								} else {
									error.insertAfter(element);
								}
							}
						});
	}

	self.getFilterData = function(container) {
		var data = {};
		$(container + ' .filter-value').each(function(index, value) {
			data[$(this).attr("id")] = $(this).val();
		});
		return data;
	}

	self.singleReportProcess = function(results,page){
		var testResult;
		if (results.data !== undefined) {
			testResult = results.data.data;
		} else {
			testResult = results.data;
		}
		if (testResult !== undefined) {
			$('#dataTable').empty();
			if (results.data.data.length > 0) {
				headerResult = results.data.headers;
				var html = '';
				html += '<thead><tr>';
				for (i in headerResult) {
					html += '<th>' + self.params[headerResult[i].toUpperCase()] + '</th>';
				}

				html += '</tr></thead>';
				// append header
				$('#dataTable').append(html);

				// fill data to table
				result = results.data.data;

				for (j in result) {
					html = '';
					html += '<tr>';
					//APW-104: Check data type
					for (i in headerResult) {
						if (typeof result[j][headerResult[i]] == 'string') {
							html += "<td>" + dataTranslate(result[j][headerResult[i]], self.params) + "</td>";
						} else if (typeof result[j][headerResult[i]] == 'number') {
							html += "<td style='text-align: right;'>" + result[j][headerResult[i]].toMoney(0,'.',',')
							+ "</td>";
						}
					}
					html += '</tr>';
					$('#dataTable').append(html);

				}
				$("#paginator").pagination({
					items : results.data.paginator.total,
					itemsOnPage : 20,
					onPageClick : submitSearch,
					currentPage : page,
					ellipsePageSet: false,
					prevText : '<i class="fa fa-angle-left"></i>',
					nextText : '<i class="fa fa-angle-right"></i>',
					cssStyle : 'light-theme'
				});
			} else {
				$("#paginator").empty();
				$('#dataTable').append(self.params.no_result_found);
			}
		} else {
			$("#paginator").empty();
			$('#dataTable').empty();
			$('#dataTable').append(self.params.connection_error);
		}
	}
	/*
	 * input obj
	 * 		obj.headers = [col1, col2, ...]
	 * 		object.data	 [{col1:val1, col2:val2, ...}, ....]
	 * output string represent a html table 
	 */
	self.__buildHTMLTable = function(obj,report){
		var htmlTable = '';
		if(obj.headers.length > 0){//loop through element.headers to build table's header
			htmlTable += '<div class="section-title"><h4>'+self.params[report]+'</h4><thead><tr>';
			obj.headers.forEach(function(head){
				//APW-104: Upper case header
				htmlTable += '<th>' + self.params[head.toUpperCase()] + '</th>';
			});
			var titleReport = params
			htmlTable += '</tr></thead></div>';
		}						
		obj.data.forEach(function(data){//loop through element.data to build table's row
			htmlTable += '<tr>';
			obj.headers.forEach(function(head){ //loop through element.headers to build row.cell
				// because data type header is array(have sequence), data is object type not sequence
				// so when loop data have to loop by header
				//APW-104: checking data is string or number
				// htmlTable += '<td>' + data[head] + '</td>';
				if (typeof data[head] == 'string') {
					htmlTable += "<td>" + dataTranslate(data[head], self.params) + "</td>";
				} else if (typeof data[head] == 'number') {
					htmlTable += "<td style='text-align: right;'>" + data[head].toMoney(0,'.',',')
					+ "</td>";
				}
			});							
			htmlTable += '</tr>';
		});
		//complete html table for each element in lstResult 
		htmlTable =  "<table class=\"tablesaw\">"+ htmlTable +"</table>"; 
		return htmlTable;
	}
	self.multipleReportProcess = function(results,reportString){
		var testResult;
		var lstResult;
		if (results.data !== undefined) {
			
			lstResult = results.data;
				//clear innerHTML of tag #dataTableChien
			if(lstResult !== undefined){
				$('#dataTableReport').empty();
				var titleReport = reportString.split(",");
				
				lstResult.forEach(function(obj, index){//loop through all element of array lstResult
//					each element, we will build a html table
					if(obj.data !== undefined){
					if(obj.data.length > 0){// if element data is not empty then
						//build html string for whole table data for each element in lstResult
						// get title report
						//var reportName = "";
						//var htmlTable="";
						
						//because client and server pass parameter with sequence like together 
						// so index of object data with index titleReport is like  
						var htmlTable = self.__buildHTMLTable(obj,titleReport[index]);
						$('#dataTableReport').append(htmlTable);
						
						
						//append html code to tag #dataTableReport == show table in html
						
					}else {
						$("#paginator").empty();
						$('#dataTable').append(self.params.no_result_found);
					}
					}else{
						$("#paginator").empty();
						$('#dataTable').empty();
						$('#dataTable').append(self.params.connection_error);
						
					}
				});
			}else{
				$("#paginator").empty();
				$('#dataTable').empty();
				$('#dataTable').append(self.params.connection_error);
				
			}
		} 
	}
	
	//APW-92:
	self.multipleReportTabDisplay = function(results){
		var testResult;
		var countResult;
		if (results.data !== undefined) {
			countResult = results.data.length;
			if (countResult > 0) {
				testResult = results.data[0].data;
			}
		} else {
			testResult = results.data;
		}
		if (testResult !== undefined) {
			//create tab
			$('#resultContent').empty();
			var html = '';
			if (results.data.length > 0) {
				tabsResult=results.data.length;
				html += '<ul id="tabsResult" class="nav nav-tabs" role="tablist">';
				for (i = 1; i<=tabsResult;i++) {
					if (i == 1) {
						html += '<li class="active"><a href="#tab' + i + '" role="tab" data-toggle="tab"></a></li>';
					} else{
						html += '<li><a href="#tab' + i + '" role="tab" data-toggle="tab"></a></li>';
					}
				}
				html += '</ul>';
			}
			//$('#resultContent').append(html);
			
			//create data table
			if (results.data.length > 0) {
				dataResult = results.data.length;
				//html = '';
				html += '<div id="tableResults" class="tab-content">';
				for (i = 1; i<=tabsResult;i++) {
					//create div contain table and put into tableResults
					if (i == 1) {
						html += '<div class="tab-pane fade active in" id="tab' + i + '">';
					} else {
						html += '<div class="tab-pane fade" id="tab' + i + '">';
					}
					
					html += '			<div class="table-responsive">';
					html += '				<table class="tablesaw" id="dataTable' + i + '"></table>';
					html += '			</div>';
					
					html += '	</div>';
				}
				html += '</div>';
				
			}
			$('#resultContent').append(html);
			
			if (results.data.length > 0) {
				dataResults = results.data.length;
				for (z = 1; z<=tabsResult;z++) {
					dataResult = results.data[z-1];
					$('#dataTable' + z).empty();
					if (dataResult.data.length > 0) {
						headerResult = dataResult.headers;
						html = '';
						html += '<thead><tr>';
						for (i in headerResult) {
							html += '<th>' + self.params[headerResult[i].toUpperCase()] + '</th>';
						}
						
						html += '</tr></thead>';
						// append header
						$('#dataTable' + z).append(html);
						// fill data to table
						result = dataResult.data;
						for (j in result) {
							html = '';
							html += '<tr>';
							//APW-104: Check data type
							for (i in headerResult) {
								if (typeof result[j][headerResult[i]] == 'string') {
									html += "<td>" + dataTranslate(result[j][headerResult[i]], self.params) + "</td>";
								} else if (typeof result[j][headerResult[i]] == 'number') {
									html += "<td style='text-align: right;'>" + result[j][headerResult[i]].toMoney(0,'.',',')
									+ "</td>";
								}
							}
							html += '</tr>';
							$('#dataTable' + z).append(html);
						}
					} else {
						$('#dataTable' + z).append(self.params.no_result_found);
					}
				}
			}
		} else {
			$("#tableResults").append(self.params.connection_error);
		}
	}
	
	self.treeReportProcess = function(results) {
		var source = results.data.data;
		if(source == undefined){
			return;
		}
		var hierarchyData = flatToChildren(source);
		var manipulateData = calculateSumAgent(hierarchyData);
		$('#result_tree').jstree({ 'core' : {
		    'data' : manipulateData,
		    'themes': {
                'name': 'proton',
                'responsive': true
            }
		},  "plugins" : ["search","types"],
		
		"search" : {
            'case_sensitive' : false,
            'show_only_matches' : true,
            search_callback: function(str, nodes) {
            	if (nodes.text.unaccent().indexOf(str.unaccent()) > -1) return true;
            }
       },"types" : {
    	   "BM" : {
               "icon" : "fa fa-user-secret"
           },"SBM" : {
               "icon" : "fa fa-user-secret"
           },"PBM" : {
               "icon" : "fa fa-user-secret"
           },"SM" : {
               "icon" : "fa fa-user-secret"
           },"UM" : {
               "icon" : "fa fa-user-secret"
           },
       }
		
		});
		
		$('#search').keyup(function(){
			 $('#result_tree').jstree('search', $(this).val());
			});
		
		$('#result_tree').on('loaded.jstree', function(e, data) {
		    // invoked after jstree has loaded
		    $(this).jstree("open_node", $('#result_tree > ul > li'));
		});
		
		/*//bootstrap tooltipped nodes list
		var tooltipped_nodes = [];
		$('#result_tree')
		// listen for event
		.on('open_node.jstree', function (e, data) {
		    $('#result_tree ul li a').each(function(index, item){
		        if (jQuery.inArray(index, tooltipped_nodes) == -1){
		        	
		        	$(this).popover({
		        	    html: true,
		        	    placement: 'right',
		        	    trigger: 'click',
		                content: "<span style='color:red'>Hover over me<span>"
		        	});
		        	$(this).tooltip({
		                'placement': 'right',
		                'trigger': 'click',
		                'data-html': "true",
		                'data-content': "<span style='color:red'>Hover over me<span>"
		            });
		            tooltipped_nodes.push(index);
		        }
		    });
		});
		
		$(document).on('click', function (e) {
		    $('#result_tree ul li a').each(function () {
		        //the 'is' for buttons that trigger popups
		        //the 'has' for icons within a button that triggers a popup
		        if (!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {                
		            (($(this).popover('hide').data('bs.popover')||{}).inState||{}).click = false  // fix for BS 3.3.6
		        }

		    });
		});*/
	
	}
	
	self._queryReport = function(page, page_size) {
		
		var data = self.getFilterData(self.params._container)
		var report = $(self.params._container).attr("report");
		var module = $(self.params._container).attr("module");
		var type = $(self.params._container).attr("type");
		var display = $(self.params._container).attr("display");
		data.agent_code = self.params.agent_code;
		if(page_size === undefined){
			page_size = 20;
		}
		
		var typeReport ;
		if (type== 'multiple'){
			typeReport = "queryMultipleReport";
		}
		else {
			typeReport = "queryReport";
		}
		
		var ajaxUrl = "/portal/report/" + typeReport + "/";
		if(type== 'multiple'){
			ajaxUrl =  ajaxUrl+"?reportName=" + report + "&module=" + module;
		}else{
			ajaxUrl =  ajaxUrl + report + "/?page=" + page + "&page_size=" + page_size + "&module=" + module;
		}
		
		run_waitMe($('body'));
		$.ajax({
			
			url :  ajaxUrl,
			type : "GET",
			data : data,
			success : function(results) {
				// fill header to table
				//APW-142: Remove checking result
				if (results.data == undefined){
					$("#paginator").empty();
					$(self.params._display_container).empty();
					$(self.params._display_container).append(self.params.connection_error);
					$('body').waitMe('hide');
					return;
				}
				
				if (type == 'multiple'){
					//APW-92
					if(display=="tab"){
						self.multipleReportTabDisplay(results);
					}else{
						self.multipleReportProcess(results, report);
					}
				}else if(type == 'tree'){
					self.treeReportProcess(results);
				}
				else{
					self.singleReportProcess(results, page);
				}
				
				if (self.params._extra_method_process_result !== undefined) {
					window[self.params._extra_method_process_result](results,
							self.params);
				}
				$('body').waitMe('hide');
			},
			error : function(error) {
				$("#paginator").empty();
				$(self.params._display_container).empty();
				$(self.params._display_container).append(self.params.connection_error);
				$('body').waitMe('hide');
			}
		});
	}

	//APW-70: Common input data 
	self.initialInputfield = function() {
		$(self.params._container + " select.select-menu").each(function() {
			var url = $(this).attr("url");
			var data = $(this).attr("data");
			self2 = $(this);
			if (url !== undefined && url != '') {
				$.ajax({
					url : url,
					type : "GET",
					success : function(results) {
						self2.select2({
							data : results.data.data,
							language : self.params.lang_code
						});
					}
				});
			} else {
				self2.select2({
					data : self.params[data],
					language : self.params.lang_code
				});
			}
		});

		$(self.params._container + " .input-group.date").each(function() {
			var viewmode = $(this).attr("viewMode");
			var format = $(this).attr("format");

			$(this).datepicker({
				format : format,
				startView : viewmode,
				minViewMode : viewmode,
				language : self.params.lang_code,
				orientation : 'bottom'
			});
			if($(this).attr("setCurrent") !== 'N' && $(this).children("input[type='text']:first").val() == ''){
				var now = new Date();
				$(this).datepicker('update', now);
			}
			
		});
	}
	
	//APW-104: Add function multi language for data
	dataTranslate = function (data, params) {
		var dataTrans = data;
		if (params !== undefined) {
			if (data != null && data != "") {
				//upper data result
				data = data.toUpperCase();
				//replace space to _ of data string
				data = data.replace(/ /g, "_");
				data = data.replace('\/', "_");
				data = data.replace('-', "_");
				data = data.replace('(', "");
				data = data.replace(')', "");
				
				if (params[data] != null) {
					dataTrans = params[data];
				}
			}
		}
		
		return dataTrans;
	}
}